// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _wordUtils = require("./word-utils");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Build acronym from words.
 *
 * Word Word Word => WWW
 */
var AcronymCreator =
/*#__PURE__*/
function () {
  function AcronymCreator() {
    _classCallCheck(this, AcronymCreator);

    this._wordQueue = [];
  }

  _createClass(AcronymCreator, [{
    key: "addWord",
    value: function addWord(word) {
      this._wordQueue.push(word);
    }
  }, {
    key: "canExtractAcronym",
    value: function canExtractAcronym() {
      return this._wordQueue.length > 0;
    }
  }, {
    key: "extractAcronym",
    value: function extractAcronym() {
      var acronym = (0, _wordUtils.expandWordsToAcronym)(this._wordQueue);
      this.clear();
      return acronym;
    }
  }, {
    key: "clear",
    value: function clear() {
      this._wordQueue = [];
    }
  }]);

  return AcronymCreator;
}();

exports.default = AcronymCreator;
//# sourceMappingURL=AcronymCreator.js.map
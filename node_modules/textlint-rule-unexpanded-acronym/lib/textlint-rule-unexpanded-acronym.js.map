{"version":3,"sources":["../src/textlint-rule-unexpanded-acronym.js"],"names":["isCapitalized","require","includes","defaultOptions","min_acronym_len","max_acronym_len","ignore_acronyms","acronymJoiningWords","context","options","minAcronymLength","maxAcronymLength","ignoreAcronymList","Syntax","RuleError","report","getSource","acronymList","expandedAcronymList","isWordSatisfy","word","length","Str","node","text","words","split","acronymCreator","AcronymCreator","forEach","trim","isOk","push","addWord","canExtractAcronym","acronym","extractAcronym","Document"],"mappings":"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","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst isCapitalized = require('is-capitalized');\nconst includes = require('array-includes');\nimport AcronymCreator from \"./AcronymCreator\";\nimport {isAllCapitals, expandWordsToAcronym} from \"./word-utils\";\nconst defaultOptions = {\n    min_acronym_len: 3,\n    max_acronym_len: 5,\n    ignore_acronyms: [],\n    acronymJoiningWords: [\n        \"of\",\n        \"the\",\n        \"for\",\n        \"in\",\n        \"and\",\n        \"or\",\n        \"&\"\n    ]\n};\n\n/*\nStep\n\n1. Collect Acronym => `acronymList`\n2. Collect original words of Acronym => `expandedAcronymList`\n3. expandedAcronymList.includes(acronymList)\n    - Not found Acronym and throw error\n */\nexport default function (context, options = {}) {\n    const minAcronymLength = options.min_acronym_len || defaultOptions.min_acronym_len;\n    const maxAcronymLength = options.max_acronym_len || defaultOptions.max_acronym_len;\n    const ignoreAcronymList = options.ignore_acronyms || defaultOptions.ignore_acronyms;\n    const acronymJoiningWords = options.acronymJoiningWords || defaultOptions.acronymJoiningWords;\n    const {Syntax, RuleError, report, getSource} = context;\n    // pickup acronyms\n    const acronymList = [];\n    // original words in document\n    const expandedAcronymList = [];\n    const isWordSatisfy = (word) => {\n        if (word.length < minAcronymLength) {\n            return false;\n        } else if (word.length > maxAcronymLength) {\n            return false;\n        }\n        return true;\n    };\n    return {\n        [Syntax.Str](node){\n            const text = getSource(node);\n            const words = text.split(/\\b/);\n            const acronymCreator = new AcronymCreator();\n            words.forEach(word => {\n                if (word.trim().length === 0) {\n                    return\n                }\n                if (isAllCapitals(word)) {\n                    // collect Acronym\n                    var isOk = isWordSatisfy(word) && !includes(ignoreAcronymList, word);\n                    if (isOk && !includes(acronymList, word)) {\n                        acronymList.push(word);\n                    }\n                } else if (isCapitalized(word)) {\n                    // Add temporarySequence\n                    // => add temp [Aword, Bword, Cword] = ABC\n                    acronymCreator.addWord(word);\n                } else if (!includes(acronymJoiningWords, word) // ignore of and...\n                    && acronymCreator.canExtractAcronym()) {\n                    // Create Acronym\n                    var acronym = acronymCreator.extractAcronym();\n                    if (isWordSatisfy(acronym)) {\n                        expandedAcronymList.push(acronym);\n                    }\n                }\n            });\n            if (acronymCreator.canExtractAcronym()) {\n                // Create Acronym\n                var acronym = acronymCreator.extractAcronym();\n                if (isWordSatisfy(acronym)) {\n                    expandedAcronymList.push(acronym);\n                }\n            }\n        },\n        [Syntax.Document + \":exit\"](node){\n            acronymList.forEach(acronym => {\n                // not found acronym in document\n                if (!includes(expandedAcronymList, acronym)) {\n                    report(node, new RuleError(`\"${acronym}\" is unexpanded acronym. What does \"${acronym}\" stand for?`));\n                }\n            });\n        }\n    }\n}\n"],"file":"textlint-rule-unexpanded-acronym.js"}